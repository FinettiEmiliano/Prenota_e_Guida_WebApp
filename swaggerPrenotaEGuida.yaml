swagger: '2.0'
info:
  description: API per la gestione delle prenotazioni delle lezioni di guida
  version: 1.0.0
  title: Prenota e Guida
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: www.prenotaeguida.it
basePath: /api/v1
tags:
  - name: authenticationToken
  - name: gestioneUtenti
  - name: disponibilità
schemes:
  - http
paths:
  /authenticationToken:
    post:
      tags:
        - authenticationToken
      summary: Authentication method and token assignment
      operationId: authentication
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: user
          description: User that want to login
          required: true
          schema:
            $ref: '#/definitions/Credentials'
      responses:
        '200':
          description: user's credential readed in the correct way
        '401':
          description: no token provided
        '403':
          description: failed to authenticate token
  /users:
    post:
      tags:
        - gestioneUtenti
      summary: Creates a user
      consumes:
        - application/json
      parameters:
        - in: body
          name: user
          schema:
            $ref: '#/definitions/User'
          required: true
          description: User to create.
      responses:
        201:
          description: User created.
        400:
          description: Name, surname or user_type undefined.
    get:
      tags:
        - gestioneUtenti
      summary: Gets all Users from the database
      produces: 
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/AllUsers'
        204:
          description: There are no Users.
  /users/instructors:
    get:
      tags:
        - gestioneUtenti
      summary: Gets all Instructors from the database
      produces: 
        - application/json
      responses:
        200:
          description: OK.
          schema:
            $ref: '#/definitions/AllInstructors'
        204:
          description: There are no Instructors.
  /users/students:
    get:
      tags:
        - gestioneUtenti
      summary: Gets all Students from the database
      produces: 
        - application/json
      responses:
        200:
          description: OK.
          schema:
            $ref: '#/definitions/AllStudents'
        204:
          description: There are no Students.
  /users/{username}:
    get:
      tags:
        - gestioneUtenti
      summary: Gets a user by Username
      produces: 
        - application/json
      parameters:
        - in: path
          name: username
          type: string
          required: true
          description: Alfanumeric ID of the user to get.
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/User'
        404:
          description: A User with the specified USERNAME was not found.
  /users/{id}:
    put:
      tags:
        - gestioneUtenti
      summary: Updates a user by ID
      consumes:
        - application/json
      produces: 
        - application/json
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          description: Numeric ID of the user to get.
        - in: body
          name: userUpdateRequest
          description: User's data to be changed
          required: true
          schema:
            $ref: '#/definitions/UpdateUserRequest'
      responses:
        200:
          description: User updated
          schema:
            $ref: '#/definitions/User'
        400:
          description: Name, surname or user_type undefined
        404:
          description: A user with the specified ID was not found.
        409:
          description: User was not updated, name and surname were not changed
    delete:
      tags:
        - gestioneUtenti
      summary: Deletes a user by ID
      produces: 
        - application/json
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          description: Numeric ID of the user to get.
      responses:
        200:
          description: User deleted
        404:
          description: A user with the specified ID was not found.
#-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  /availabilities:
    post:
      tags:
        - disponibilità
      summary: Insert a new availabilities
      consumes: 
        - application/json
      parameters:
        - in: body
          name: availabilities
          schema: 
            $ref: '#/definitions/Availability'
          required: true
          description: Availabilities to insert 
      responses:
        201: 
          description: workshift created.
        412:
          description: ome required filed are emtpy or incorrect
        403: 
          description: The user isn't an instructor
        404: 
          description: The user doesn't exists
        476:
          description: The workshift overlaps another workshift
        409:
          description: Shift goes beyond working hours
    get:
      tags:
        - disponibilità
      summary: Gets all availabilities of all instructors
      produces: 
        - application/json
      responses:
        200: 
          description: OK 
          schema: 
            $ref: '#/definitions/AllavailabilityAllInstructors'
        204: 
          description: There are not workshifts
  /availabilities/{idIstructor}:
    get:
      tags:
        - disponibilità
      summary: Gets all availabilities by id of instructor
      produces: 
        - application/json
      parameters: 
        - in: path
          name: idIstructor 
          type: integer
          required: true
          description: Alfanumeric ID of the instructor
      responses:
        200: 
          description: OK 
          schema: 
            $ref: '#/definitions/Allavailability'
        204: 
          description: There are not workshifts
  /availabilities/{id}:
    put:  
      tags:
        - disponibilità
      summary: Update an avaliability by its id 
      consumes:
        - application/json
      produces: 
        - application/json
      parameters: 
        - in: path
          name: id 
          type: integer
          required: true
          description: Alfanumeric ID of the avaliability to change
        - in: body
          name: availabilitiesUpdateRequest
          description: Avaliability's data to be changed
          required: true
          schema: 
            $ref: '#/definitions/AvailabilitiesUpdateRequest'
      responses:
        200: 
          description: OK 
          schema: 
            $ref: '#/definitions/Availability' 
        404:
          description: The user does not exist
        400:
          description: The workshift doesn't exists
        403:  
          description: The user isn't an instructor
        409:
          description: Shift goes beyond working hours
        412: 
          description: Some required filed are emtpy or incorrect
        476:
          description: The workshift overlaps another workshif
    delete:
      tags:
        - disponibilità
      summary: Deletes a avaliability by id 
      produces: 
         - application/json
      parameters:
         - in: path
           name: id
           type: integer
           required: true
           description: Alfanumeric ID of the avaliability to delete
      responses:
        200:
          description: Cancellation done
        404:
          description: The user does not exist
        403:  
          description: The user isn't an instructor
    #-----------------------DEFINITION#-----------------------
definitions:
  Availability:
    type: object
    properties: 
      data: 
        type: object
        properties:
          day: 
            type: integer
          month:
            type: integer
          year:
            type: integer
      instructor:
        type: number
      start_time:
        type: object
        properties:
          hour:
            type: integer
          minute:
            type: integer
      end_time: 
        type: object
        properties:
          hour:
            type: integer
          minute:
            type: integer
      duration:
        type: integer
      time_slot:
        type: array
        items:
          type: object
          properties:
            hour:
              type: integer
            minute:
              type: integer
    example:
      - data: 
          {
            day: 6,
            month: 12,
            year: 2011
          }
        instructor: 
          {
            value: 291234
          }
        start_time: 
          {
            hour: 15,
            minute: 30
          }
        end_time:
          {
            hour: 16,
            minute: 30
          }
        duration: 
          {
            value: 30
          }
        time_slot:
          [
            {
              hour: 15,
              minute: 30
            },
            {
              hour: 16,
              minute: 00
            }
          ]
    xml:
      name: Availability  
  Allavailability:
    type: array
    items:
      type: object
      properties: 
        data: 
          type: object
          properties:
            day: 
              type: integer
            month:
              type: integer
            year:
              type: integer
        instructor:
          type: number
        start_time:
          type: object
          properties:
            hour:
              type: integer
            minute:
              type: integer
        end_time: 
          type: object
          properties:
            hour:
              type: integer
            minute:
              type: integer
        duration:
          type: integer
        time_slot:
          type: array
          items:
            type: object
            properties:
              hour:
                type: integer
              minute:
                type: integer
    example:
      - data: 
          {
            day: 6,
            month: 12,
            year: 2011
          }
        instructor: 
          {
            value: 291234
          }
        start_time: 
          {
            hour: 15,
            minute: 30
          }
        end_time:
          {
            hour: 16,
            minute: 30
          }
        duration: 
          {
            value: 30
          }
        time_slot:
          [
            {
              hour: 15,
              minute: 30
            },
            {
              hour: 16,
              minute: 00
            }
          ]
      - data: 
          {
            day: 7,
            month: 12,
            year: 2011
          }
        instructor: 
          {
            value: 291234
          }
        start_time: 
          {
            hour: 14,
            minute: 30
          }
        end_time:
          {
            hour: 17,
            minute: 30
          }
        duration: 
          {
            value: 30
          }
        time_slot:
          [
            {
              hour: 14,
              minute: 30
            },
            {
              hour: 15,
              minute: 00
            },
            {
              hour: 15,
              minute: 30
            },
            {
              hour: 16,
              minute: 00
            },
            {
              hour: 16,
              minute: 30
            },
            {
              hour: 17,
              minute: 00
            }
          ]
    xml:
      name: Allavailability 
  AllavailabilityAllInstructors:
    type: array
    items:
      type: object
      properties: 
        data: 
          type: object
          properties:
            day: 
              type: integer
            month:
              type: integer
            year:
              type: integer
        instructor:
          type: number
        start_time:
          type: object
          properties:
            hour:
              type: integer
            minute:
              type: integer
        end_time: 
          type: object
          properties:
            hour:
              type: integer
            minute:
              type: integer
        duration:
          type: integer
        time_slot:
          type: array
          items:
            type: object
            properties:
              hour:
                type: integer
              minute:
                type: integer
    example:
      - data: 
          {
            day: 6,
            month: 12,
            year: 2011
          }
        instructor: 
          {
            value: 291234
          }
        start_time: 
          {
            hour: 15,
            minute: 30
          }
        end_time:
          {
            hour: 16,
            minute: 30
          }
        duration: 
          {
            value: 30
          }
        time_slot:
          [
            {
              hour: 15,
              minute: 30
            },
            {
              hour: 16,
              minute: 00
            }
          ]
      - data: 
          {
            day: 7,
            month: 12,
            year: 2011
          }
        instructor: 
          {
            value: 291234
          }
        start_time: 
          {
            hour: 14,
            minute: 30
          }
        end_time:
          {
            hour: 17,
            minute: 30
          }
        duration: 
          {
            value: 30
          }
        time_slot:
          [
            {
              hour: 14,
              minute: 30
            },
            {
              hour: 15,
              minute: 00
            },
            {
              hour: 15,
              minute: 30
            },
            {
              hour: 16,
              minute: 00
            },
            {
              hour: 16,
              minute: 30
            },
            {
              hour: 17,
              minute: 00
            }
          ]
      - data: 
          {
            day: 7,
            month: 12,
            year: 2011
          }
        instructor: 
          {
            value: 301234
          }
        start_time: 
          {
            hour: 14,
            minute: 30
          }
        end_time:
          {
            hour: 17,
            minute: 30
          }
        duration: 
          {
            value: 30
          }
        time_slot:
          [
            {
              hour: 14,
              minute: 30
            },
            {
              hour: 15,
              minute: 00
            },
            {
              hour: 15,
              minute: 30
            },
            {
              hour: 16,
              minute: 00
            },
            {
              hour: 16,
              minute: 30
            },
            {
              hour: 17,
              minute: 00
            }
          ]
    xml:
      name: AllavailabilityAllInstructors
  AvailabilitiesUpdateRequest:
    type: object
    properties: 
      data: 
        type: object
        properties:
          day: 
            type: integer
          month:
            type: integer
          year:
            type: integer
      instructor:
        type: number
      start_time:
        type: object
        properties:
          hour:
            type: integer
          minute:
            type: integer
      end_time: 
        type: object
        properties:
          hour:
            type: integer
          minute:
            type: integer
      duration:
        type: integer
      time_slot:
        type: array
        items:
          type: object
          properties:
            hour:
              type: integer
            minute:
              type: integer
    example:
      - data: 
          {
            day: 6,
            month: 12,
            year: 2011
          }
        instructor: 
          {
            value: 291234
          }
        start_time: 
          {
            hour: 15,
            minute: 30
          }
        end_time:
          {
            hour: 16,
            minute: 30
          }
        duration: 
          {
            value: 30
          }
        time_slot:
          [
            {
              hour: 15,
              minute: 30
            },
            {
              hour: 16,
              minute: 00
            }
          ]
    xml:
      name: AvailabilitiesUpdateRequest
  Credentials:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
    xml:
      name: Credentials
  User:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
      user_type:
        type: string
      name:
        type: string
      surname:
        type: string
      photo:
        type: string
    example:
      - username: MarioRossi0
        password: j8sd3
        user_type: Studente
        name: Mario
        surname: Rossi
        photo: ---
    xml:
      name: User
  AllUsers:
    type: array
    items:
      $ref: '#/definitions/User'
    example:
      - username: MarioRossi0
        password: j8sd3
        user_type: Studente
        name: Mario
        surname: Rossi
        photo: ---
      - username: MarioRossi1
        password: nvm13
        user_type: Studente
        name: Mario
        surname: Rossi
        photo: ---
      - username: CarloCracco0
        password: s621h
        user_type: Istruttore
        name: Carlo
        surname: Cracco
        photo: ---
    xml:
      name: ArrayOfUsers
  AllStudents:
    type: array
    items:
      $ref: '#/definitions/User'
    example:
      - username: MarioRossi0
        password: j8sd3
        user_type: Studente
        name: Mario
        surname: Rossi
        photo: ---
      - username: MarioRossi1
        password: nvm13
        user_type: Studente
        name: Mario
        surname: Rossi
        photo: ---
      - username: CarloCracco0
        password: s621h
        user_type: Studente
        name: Carlo
        surname: Cracco
        photo: ---
    xml:
      name: ArrayOfStudents
  AllInstructors:
    type: array
    items:
      $ref: '#/definitions/User'
    example:
      - username: MarioRossi0
        password: j8sd3
        user_type: Istruttore
        name: Mario
        surname: Rossi
        photo: ---
      - username: MarioRossi1
        password: nvm13
        user_type: Istruttore
        name: Mario
        surname: Rossi
        photo: ---
      - username: CarloCracco0
        password: s621h
        user_type: Istruttore
        name: Carlo
        surname: Cracco
        photo: ---
    xml:
      name: ArrayOfInstructors  
  UpdateUserRequest:
    type: object
    properties:
      user_type:
        type: string
      name:
        type: string
      surname:
        type: string
      photo:
        type: string
      changePsw:
        type: boolean
    xml:
      name: UpdateUserRequest
  